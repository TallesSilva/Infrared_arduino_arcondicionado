#include <windows.h>
#include <stdio.h>
#include<stdlib.h>

typedef struct 
{
	int info;
	struct Pessoas *prox;
}Pessoas;

Pessoas *alocarNo()
{
	Pessoas *novoNo;
	novoNo = (Pessoas *)malloc(sizeof(Pessoas));
	novoNo->prox=NULL;
	return novoNo;
}
FILE *arquivo;
int *vet;
Pessoas *F=NULL;	
Pessoas *Atual=NULL;

void inserir(int valor)
{
	if(F==NULL)
	{
		F = alocarNo();
		F->info = valor;
		F->prox = NULL;
	}else
	{
		Atual = F;
		if(Atual->prox==NULL)
		{
			Atual->prox = (struct  Pessoas *)alocarNo();
			Atual = ( Pessoas *)Atual->prox;
			Atual->info=valor;
		}
		else
		{
			while(Atual->prox!=NULL)
			{
				Atual = ( Pessoas *)Atual->prox;
			}
			Atual->prox = (struct  Pessoas *)alocarNo();
			Atual = ( Pessoas *)Atual->prox;
			Atual->info=valor;

		}
	}
}
void arquivar()
{
	arquivo = fopen("ARQUIVO.txt","w+");
	if(F==NULL)
	{}
	else
	{
	Atual = F;
		while(Atual != NULL)
		{
			fprintf(arquivo,"%i\n",Atual->info);
			Atual = (Pessoas *)Atual->prox;
		}
	}
	fclose(arquivo);
}
// Ler caractere
char SerialGetc(HANDLE *hCom)
{
	char rxchar;
	BOOL bReadRC;
	static DWORD iBytesRead;

	bReadRC = ReadFile(*hCom, &rxchar, 1, &iBytesRead, NULL);
	return rxchar;
}


// Escrever caractere
void SerialPutc(HANDLE hCom, char txchar)
{
	BOOL bWriteRC;
	static DWORD iBytesWritten;

	bWriteRC = WriteFile(hCom, &txchar, 1, &iBytesWritten,NULL);

	return;
}


// Ler string
char* SerialGets(HANDLE *hCom)
{
	static char rxstring[256];
	char c;
	int pos = 0;

	while(pos <= 255)
	{ 
		c = SerialGetc(hCom); 
		if (c==13) break;
		if(c == '\r') continue; // discard carriage return 
		rxstring[pos++] = c; 
		if(c == '\n') break; 

	} 
	rxstring[pos] = 0; 
	return rxstring; 
} 
		

// Escrever string
void SerialPuts(HANDLE *hCom, char *txstring) 
{ 
	BOOL bWriteRC; 
	static DWORD iBytesWritten; 
	bWriteRC = WriteFile(*hCom, txstring, strlen(txstring), &iBytesWritten,NULL); 
} 

int main(int argc, char *argv[])
{
   char opcao = '0';
   DCB dcb;
   HANDLE hCom;
   BOOL fSuccess;
   LPCWSTR LpcCommPort = L"COM5";
   int x = 0;

   hCom = CreateFile( LpcCommPort,
                    GENERIC_READ | GENERIC_WRITE,
                    0,    // must be opened with exclusive-access
                    NULL, // no security attributes
                    OPEN_EXISTING, // must use OPEN_EXISTING
                    0,    // not overlapped I/O
                    NULL  // hTemplate must be NULL for comm devices
                    );

   if (hCom == INVALID_HANDLE_VALUE) 
   {
       // Handle the error.
       printf ("CreateFile failed with error %d.\n", GetLastError());
       return (1);
   }

   // Build on the current configuration, and skip setting the size
   // of the input and output buffers with SetupComm.

   fSuccess = GetCommState(hCom, &dcb);

   if (!fSuccess) 
   {
      // Handle the error.
      printf ("GetCommState failed with error %d.\n", GetLastError());
      return (2);
   }

   // Fill in DCB: 57,600 bps, 8 data bits, no parity, and 1 stop bit.

   dcb.BaudRate = CBR_9600;     // set the baud rate
   dcb.ByteSize = 8;             // data size, xmit, and rcv
   dcb.Parity = NOPARITY;        // no parity bit
   dcb.StopBits = ONESTOPBIT;    // one stop bit

   fSuccess = SetCommState(hCom, &dcb);

   //

   if (!fSuccess) 
   {
      // Handle the error.
      printf ("SetCommState failed with error %d.\n", GetLastError());
      return (3);
   }

   printf ("Serial port successfully reconfigured.\n");
   // nao mexer

   while(opcao != '5')
   {
	   printf("Digite a opcao\n");
	   opcao = getchar();
	   fflush(stdin);

	   printf("Dado enviado para o arduino: %c\n", opcao);
	   switch(opcao)
	   {
	   case 'P':
		    SerialPutc(hCom, opcao);
			Sleep(1000);
			//printf("%s",SerialGets(&hCom));
			x = atoi(SerialGets(&hCom));
			inserir(x);
			printf("%i pessoas no recinto\n",x);
			
			arquivar();
			
			if(x==0)
			{
				Sleep(1000);
				SerialPutc(hCom, 'A');				
			}
			if(x==1)
			{
				Sleep(1000);
				SerialPutc(hCom, 'B');				
			}
			if(x>1 && x<=10)
			{
				Sleep(1000);
				SerialPutc(hCom, 'C');				
			}
			if(x>10 && x<=20)
			{
				Sleep(1000);
				SerialPutc(hCom, 'D');				
			}
			if(x>20 && x<=30)
			{
				Sleep(1000);
				SerialPutc(hCom, 'E');				
			}
			if(x>30)
			{
				Sleep(1000);
				SerialPutc(hCom, 'F');				
			}
	   default:
		   break;
	   }
   }
}